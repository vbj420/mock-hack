
// SUM OF N NATURAL NUMBERS
// 1 AND 2
// PARALLEL CODE
#include <stdio.h>
#include <omp.h>

int main() {
    int n = 100; // Change this as needed
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 1; i <= n; i++) {
        sum += i;
    }

    printf("Sum of first %d natural numbers is: %d\n", n, sum);
    return 0;
}


// NO USE PARALLELIZATION
#include <stdio.h>
#include <omp.h>

int main() {


    int n = 100; // Change this value as needed
    int sum = 0;

    #pragma omp parallel for
    for (int i = 1; i <= n; i++) {
        #pragma omp critical
        sum += i;
    }

    printf("Sum of first %d natural numbers is: %d\n", n, sum);
    return 0;
}



//3
// LOOP CARRIED DEPENDENCE 

#include <stdio.h>
#include <omp.h>

#define N 10  // Array size

int main() {
    int A[N], B[N], C[N];

    // Initialize arrays
    for (int i = 0; i < N; i++) {
        A[i] = i + 1;
        B[i] = (i + 1) * 2;
        C[i] = 0; // Initialize C
    }

    // Serial computation to handle the first dependency
    C[0] = A[0] + B[0];

    // Parallel loop with explicit handling of dependencies
    #pragma omp parallel
    {
        for (int i = 1; i < N; i++) {
            C[i] = C[i - 1] + A[i] + B[i];  // Loop-carried dependency on C[i-1]
        }
    }

    // Print result
    printf("Array C: ");
    for (int i = 0; i < N; i++) {
        printf("%d ", C[i]);
    }
    printf("\n");

    return 0;
}


// SHARED AND PRIVATE 

#include <stdio.h>
#include <omp.h>

int main() {
    int sharedVar = 0; // Shared variable
    int num_threads;

    #pragma omp parallel private(num_threads)
    {
        int privateVar = omp_get_thread_num(); // Each thread gets its own copy

        #pragma omp critical
        {
            sharedVar += privateVar; // Safely updating the shared variable
        }

        // Print private data for each thread
        printf("Thread %d: privateVar = %d\n", omp_get_thread_num(), privateVar);
    }

    // Print final value of sharedVar
    printf("Final sharedVar: %d\n", sharedVar);

    return 0;
}


// matrix mult 
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 500  // Define matrix size (adjust for performance testing)

void initialize_matrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            matrix[i][j] = rand() % 10;  // Assign random values (0-9)
}

void print_matrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%d ", matrix[i][j]);
        printf("\n");
    }
}

int main() {
    int A[N][N], B[N][N], C[N][N] = {0};  // Initialize matrices

    initialize_matrix(A);
    initialize_matrix(B);

    double start_time = omp_get_wtime();  // Start timing

    // Parallelized matrix multiplication
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];  // Compute C[i][j]
            }
        }
    }

    double end_time = omp_get_wtime();  // End timing

    printf("Parallel Execution Time: %f seconds\n", end_time - start_time);

    return 0;
}


///pi estimation 
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define NUM_POINTS 100000000  // Number of random points (higher = better accuracy)

int main() {
    int count_inside = 0;
    double x, y;
    double pi_estimate;
    
    // Seed random number generator
    srand(42);

    double start_time = omp_get_wtime(); // Start timing

    #pragma omp parallel for private(x, y) reduction(+:count_inside)
    for (int i = 0; i < NUM_POINTS; i++) {
        x = (double)rand() / RAND_MAX; // Random x in [0,1]
        y = (double)rand() / RAND_MAX; // Random y in [0,1]

        if (x * x + y * y <= 1) {
            count_inside++;
        }
    }

    pi_estimate = 4.0 * count_inside / NUM_POINTS;

    double end_time = omp_get_wtime(); // End timing

    printf("Estimated Pi: %f\n", pi_estimate);
    printf("Parallel Execution Time: %f seconds\n", end_time - start_time);

    return 0;
}
